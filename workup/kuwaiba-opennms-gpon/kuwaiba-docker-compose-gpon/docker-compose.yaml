---

# Docker compose project containing kuwaiba opennms wireless simulation
# Craig Gallen Entimoss LTD
#
# USAGE
# The full demo uses a lot of memory so there is an option to only run thekuwaiba and opennms-pris containers.
# With no profile set only kuwaiba and kuwaiba-pris containers will start
#
# docker compose up -d 
#
# The docker compose script has a profile to start opennms and the simulation as well as kuwaiba and pris.
#
# docker compose  --profile opennms up -d
#
# With the [opennms] profile set all the containers will start.
# kuwaiba, pris and opennms, grafana, 4 minions, simulated radio network

# to ensure complete shutdown use
#
# docker compose  --profile opennms down
#

# using fixed ip addresses so opennms provisoning config works with known addresses
# to see all network use docker network ls
# to see config use docker network inspect kuwabia-docker-compose_kuwaiba-net
# note gateway is 172.30.0.1 
networks:
  kuwaiba-net:
    ipam:
      config:
        - subnet: 172.30.0.0/24
  testgponnetwork1:
    ipam:
      config:
        - subnet: 192.168.105.0/24

volumes:
  data-kuwaiba: {}
  data-postgres: {}
  data-opennms: {}
  data-opennms-cfg: {}
  data-grafana: {}
  data-pgadmin: {}

services:

  nginx:
    image: nginx:1.23-alpine
    container_name: nginx
    hostname: nginx
    restart: unless-stopped
    volumes:
      - ./container-fs/nginx/conf.d:/etc/nginx/conf.d
      - ./container-fs/nginx/certs:/etc/ssl/certs
      - ./container-fs/nginx/private:/etc/ssl/private
      - ./container-fs/nginx/html/index.html:/usr/share/nginx/html/index.html
    ports:
      - "80:80"
      - "443:443"
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.5

  kuwaiba:
 #    image: ${DOCKER_REGISTRY:-docker.io}/neotropic/kuwaiba:${KUWAIBA_VERSION:-v2.1-nightly}
    image: onms-integration/kuwaiba
    build: ./container-fs/kuwaiba/
    container_name: kuwaiba
    hostname: kuwaiba
 #   environment:
 #    URL_DATA: https://sourceforge.net/projects/kuwaiba/files/Version%202.x/kuwaiba_server_2.1.1_stable.zip
    volumes:
      - data-kuwaiba:/data
      - ./container-fs/kuwaiba/start.sh:/start.sh
      - ./container-fs/kuwaiba/data-overlay:/data-overlay
      - ./container-fs/kuwaiba/data-zip:/data-zip
      - ./container-fs/kuwaiba/external-data:/external-data
    ports:
      - "8080:8080"
      - "8081:8081"

    # To combine stderr and stdout into the stdout stream, we append this to a command: 2>&1
    # command: sh -c "java -jar /opt/programs/kuwaiba_server_2.1.1-stable.jar > /data/logs/kuwaiba_$(date +%Y%m%d_%H%M%S).log 2>&1"
    command: sh /start.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "-I", "http://localhost:8080/kuwaiba/"]
      interval: 30s
      timeout: 5s
      retries: 1
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.55

  pris-kuwaiba:
    container_name: pris-kuwaiba
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${MINION_OCI:-pris}:${PRIS_VERSION:-latest}
    environment:
      - TZ=Europe/Berlin
      - JAVA_OPTS=-XX:+PrintGCDetails -XX:+UnlockExperimentalVMOptions
    volumes:
      - ./container-fs/pris/requisitions:/opt/opennms-pris/requisitions
      - ./container-fs/pris/scriptsteps:/opt/opennms-pris/scriptsteps
      - ./container-fs/pris/lib/jackson-annotations-2.16.0.jar:/opt/opennms-pris/lib/jackson-annotations-2.16.0.jar
      - ./container-fs/pris/lib/jackson-core-2.16.0.jar:/opt/opennms-pris/lib/jackson-core-2.16.0.jar
      - ./container-fs/pris/lib/jackson-databind-2.16.0.jar:/opt/opennms-pris/lib/jackson-databind-2.16.0.jar
    healthcheck:
      test: ["CMD", "curl", "-f", "-I", "http://localhost:8000/pris/2.1.0/index.html"]
      interval: 30s
      timeout: 5s
      retries: 1
    ports:
      - "8020:8000"
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.35
        
  kafka:
    profiles: [opennms]
    image: ${DOCKER_REGISTRY:-docker.io}/confluentinc/cp-kafka:${KAFKA_VERSION:-latest}
    container_name: kafka
    hostname: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,BROKER:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka:29092,CONTROLLER://kafka:29093,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://kafka:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: 'rkKB84SG2NOYITcxMkSeFw=='
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    ports:
      - "29092:29092/tcp"
      - "9092:9092/tcp"
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.22

  kafka-ui:
    profiles: [opennms]
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    depends_on:
      kafka:
        condition: service_started
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      KAFKA_CLUSTERS_0_NAME: onms-stack-play
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      SERVER_SERVLET_CONTEXT_PATH: /kafka-ui
    ports:
      - "8085:8080/tcp"
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.24
        
  database:
    profiles: [opennms]
    image: ${DOCKER_REGISTRY:-docker.io}/postgres:${POSTGRES_VERSION:-13}
    container_name: database
    hostname: database
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - data-postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 30s
      retries: 3
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.10

  pgadmin:
    profiles: [opennms]
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: minad1234
      PGADMIN_SERVER_JSON_FILE: /pgadmin/servers.json
    volumes:
      - data-pgadmin:/var/lib/pgadmin
      - ./container-fs/pgadmin/:/pgadmin
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.11

  horizon:
    profiles: [opennms]
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${HORIZON_OCI:-horizon}:${ONMS_VERSION:-bleeding}
    container_name: horizon
    hostname: horizon
    sysctls:
      net.ipv4.ping_group_range: "0 429496729"
    depends_on:
      database:
        condition: service_healthy
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      # JAVA_OPTS updates from default in container (-Xmx1024m -XX:MaxMetaspaceSize=512m) plus enable debugger
      # extenal jdb connection from windows using  jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8001
      JAVA_OPTS: -Xmx2048m -XX:MaxMetaspaceSize=512m -agentlib:jdwp=transport=dt_socket,server=y,address=*:8001,suspend=n
    volumes:
      - data-opennms:/opennms-data
      - data-opennms-cfg:/opt/opennms/etc
      - ./container-fs/horizon/opt/opennms/deploy:/opt/opennms/deploy
      - ./container-fs/horizon/opt/opennms-overlay:/opt/opennms-overlay
      - ./container-fs/horizon/etc/conf.d/confd.toml:/etc/confd/confd.toml
    command: ["-s"]
    ports:
      - "8101:8101/tcp"   # karaf ssh
      - "8980:8980/tcp"   # web ui
      - "10162:1162/udp"  # snmp trap
      - "10514:10514/udp" # syslog
      - "61616:61616/tcp" # activemq
      - "8990:8990" # grpc
      - "8001:8001" # JPDA debugging port
    healthcheck:
      test: [ "CMD", "curl", "-f", "-I", "http://localhost:8980/opennms/login.jsp" ]
      interval: 1m
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.15
      
  grafana:
    profiles: [opennms]
    image: ${DOCKER_REGISTRY:-docker.io}/grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: grafana
    hostname: grafana
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      GF_SECURITY_ADMIN_PASSWORD: mypass
      GF_INSTALL_PLUGINS: opennms-opennms-app,grafana-piechart-panel,neocat-cal-heatmap-panel,briangann-datatable-panel
      GF_SERVER_HTTP_PORT: 3000
      GF_SERVER_PROTOCOL: http
      GF_SERVER_DOMAIN: localhost:80
      GF_SERVER_ROOT_URL: http://localhost:80/grafana/
      GF_SERVER_SERVER_FROM_SUB_PATH: true
      
      # datasources - should match variable substitution in datasources
      ONMS_GRAFANA_USERNAME: admin
      ONMS_GRAFANA_PASSWORD: admin
      POSTGRES_GRAFANA_USERNAME: postgres
      POSTGRES_GRAFANA_PASSWORD: postgres

    volumes:
      - data-grafana:/var/lib/grafana
      - ./container-fs/grafana/provisioning:/etc/grafana/provisioning/
      - ./container-fs/grafana/conf/conf.ini:/conf/conf.ini
    ports:
      - "3000:3000/tcp"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 100M
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.20

# minion1 is an instance of a minion on testgponnetwork network. Used to access devices simulated using snmpsim
# LOCATION fex001
  minion1:
    profiles: [opennms]
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${MINION_OCI:-minion}:${ONMS_VERSION:-bleeding}
    container_name: minion1
    hostname: minion1
    sysctls:
      net.ipv4.ping_group_range: "0 429496729"
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      JAVA_MIN_MEM: 512M  # doesnt work
      JAVA_MAX_MEM: 2048M # doesnt work
      JAVA_OPTS: -Xmx2048m -Xms512m -agentlib:jdwp=transport=dt_socket,server=y,address=*:8001,suspend=n
    volumes:
      - './container-fs/minion1/opt/minion/minion-config.yaml:/opt/minion/minion-config.yaml'
    command: ["-f"]
#    depends_on:
#      horizon:
#        condition: service_healthy
    healthcheck:
      test: "/health.sh"
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "8201:8201/tcp"
      - "1162:1162/udp"
      - "1514:1514/udp"
      - "9001:8001" # JPDA debugging port
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 3216M
    networks:
      kuwaiba-net:
        ipv4_address: 172.30.0.25
      testgponnetwork1:
        ipv4_address: 192.168.105.245

